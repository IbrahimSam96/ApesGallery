import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'

const inter = Inter({ subsets: ['latin'] })
import { useEffect, useState } from 'react'
import { Canvas } from '@react-three/fiber'
import { Stats } from '@react-three/drei'
import {ethers} from 'ethers'
import { createClient } from 'urql'

export default function Home() {


  const [address, setAddress] = useState("");

  const [MutantTokens, setMutantTokens] = useState([]);
  const [BoredTokens, setBoredTokens] = useState([]);

  const MutantAPIURL = "https://api.thegraph.com/subgraphs/name/dabit3/boredapeyachtclub"
  const BoredAPIURL = "https://api.thegraph.com/subgraphs/name/gautamraju15/bayc-indexer"

  const Mutantquery = `
  {
    tokens(where: {owner_: {id: "${address}"}}) {
      tokenID
      imageURI
    }
  }
`
  const Boredquery = `
{
  boredApeTokens(where: {owner: "${address}"}) {
    tokenID
    imageURI
    owner {
      id
    }
  }
}
`
  const client = createClient({
    url: MutantAPIURL
  })
  const client2 = createClient({
    url: BoredAPIURL
  })

  useEffect(() => {
    let isAddress = ethers.utils.isAddress(address) 
    if (isAddress) {
      fetchData()
    }
  }, [address])



  async function fetchData() {
    const mutantresponse = await client.query(Mutantquery, {}).toPromise();
    const boredresponse = await client2.query(Boredquery, {}).toPromise();

    console.log('mutantresponse:', mutantresponse)
    console.log('boredresponse:', boredresponse)

    // setTokens(response.data.tokens);
  }


  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={`h-full min-h-screen w-full grid grid-cols-[repeat(7,1fr)] grid-rows-[100px,25px,400px,100px] bg-[black]`}>
        <input
          placeholder='Search By Owner Address'
          className={` px-2 self-center justify-self-center col-start-1 col-end-8 bg-black hover:bg-[#353434] border-slate-500 border-[1px] rounded-sm focus:outline-none text-neutral-50 min-w-[300px]`}
          type="text"
          onChange={(e) => {
            setAddress(e.target.value)
          }}
        >
        </input>
        <Canvas className={`row-start-3 col-start-1 col-span-7`} shadows camera={{ fov: 70, position: [0, 2, 15] }}>
          <Stats />
        </Canvas>
      </div>
    </>
  )
}
